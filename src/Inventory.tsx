// Inventory.tsx ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" —Å —Ñ—Ä–µ–π–º–∞–º–∏ "–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –∏ "–ü—Ä–µ–¥–º–µ—Ç—ã –º–æ–Ω—Å—Ç—Ä–æ–≤"
import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ MonsterItems
const MonsterItems = React.lazy(() => import("./MonsterItems"));

// ===== –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö =====
interface ItemAction {
  actionname: string;
  actionicon: string;
  actionfunction: string;
  actionargument: string;
}

interface UserInventoryItem {
  inventoryitem: {
    inventoryid: number;
    inventoryname: string;
    inventoryimage: string;
    inventoryfunction: string | null;
    inventorydescription: string;
    inventorytype: number;
    inventorysaleprice: number;
    quantity: string;
    activity: boolean;
    itemactions: ItemAction[];
  };
}

interface UserItemsResponse {
  useritems: UserInventoryItem[];
}

interface InventoryProps {
  userId: number | null;
}

// ===== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏ =====
async function withRetry<T>(
  fn: () => Promise<T>,
  isValid: (v: T) => boolean,
  label: string
): Promise<T> {
  let lastErr: any = null;
  for (let attempt = 1; attempt <= 4; attempt++) {
    try {
      const res = await fn();
      if (!isValid(res)) throw new Error("–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç");
      return res;
    } catch (e: any) {
      lastErr = e;
      if (attempt < 4) await new Promise((r) => setTimeout(r, 300));
    }
  }
  const text =
    typeof lastErr?.message === "string"
      ? `${label}: ${lastErr.message}`
      : label;
  throw new Error(text);
}

// ===== –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç =====
const Inventory: React.FC<InventoryProps> = ({ userId }) => {
  const [items, setItems] = useState<UserInventoryItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string>("");
  const [selectedItem, setSelectedItem] = useState<number | null>(null);
  const [actionLoading, setActionLoading] = useState<string | null>(null);
  const [actionMessage, setActionMessage] = useState<string>("");
  const [showModal, setShowModal] = useState(false);

  // ===== –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
  const loadUserItems = useCallback(async () => {
    if (!userId) {
      setLoading(false);
      setError("userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }

    setLoading(true);
    try {
      const response = await withRetry(
        () =>
          axios.post<UserItemsResponse>(
            "https://functions.yandexcloud.net/d4equu3ca3un79vad7eq",
            { userId }
          ),
        (r) => r != null && Array.isArray((r as any)?.data?.useritems),
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );

      setItems(response.data.useritems || []);
      setError("");
    } catch (e: any) {
      setError(e.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤");
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    loadUserItems();
  }, [loadUserItems]);

  // ===== –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º =====
  const handleItemAction = async (action: ItemAction) => {
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:", action.actionname);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
    setActionLoading(action.actionname);
    setSelectedItem(null);

    try {
      let requestBody: any;
      try {
        requestBody = JSON.parse(action.actionargument);
      } catch {
        requestBody = {};
      }

      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫:", action.actionfunction);
      console.log("–° –¥–∞–Ω–Ω—ã–º–∏:", requestBody);

      const response = await withRetry(
        () => axios.post(action.actionfunction, requestBody),
        () => true, // –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –æ—Ç–≤–µ—Ç
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è"
      );

      console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", response.data);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
      const message =
        response.data?.message ||
        response.data?.text ||
        "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ";
      setActionMessage(String(message));
      setShowModal(true);
    } catch (e: any) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:", e);
      setActionMessage(e.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è");
      setShowModal(true);
    } finally {
      console.log("–£–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä");
      setActionLoading(null);
    }
  };

  // ===== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è =====
  const refreshAllFrames = useCallback(async () => {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏–Ω–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      setLoading(true);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await loadUserItems();

      // –§—Ä–µ–π–º "–ü—Ä–µ–¥–º–µ—Ç—ã –º–æ–Ω—Å—Ç—Ä–æ–≤" –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
      // –ø—Ä–∏ –≤—ã–∑–æ–≤–µ onRefreshAllFrames
    } catch (e: any) {
      setError(e.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
    } finally {
      setLoading(false);
    }
  }, [loadUserItems]);

  // ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –±–µ–π–¥–∂–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞ =====
  const getBadgeStyle = (type: number): string => {
    switch (type) {
      case 1:
        return "bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200";
      case 2:
        return "bg-gradient-to-br from-green-50 to-green-100 border-green-200";
      case 3:
        return "bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200";
      case 4:
        return "bg-gradient-to-br from-red-50 to-red-100 border-red-200";
      case 5:
        return "bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200";
      case 6:
        return "bg-gradient-to-br from-pink-50 to-pink-100 border-pink-200";
      case 7:
        return "bg-gradient-to-br from-indigo-50 to-indigo-100 border-indigo-200";
      case 8:
        return "bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200";
      case 9:
        return "bg-gradient-to-br from-teal-50 to-teal-100 border-teal-200";
      case 10:
        return "bg-gradient-to-br from-cyan-50 to-cyan-100 border-cyan-200";
      case 11:
        return "bg-gradient-to-br from-emerald-50 to-emerald-100 border-emerald-200";
      case 12:
        return "bg-gradient-to-br from-rose-50 to-rose-100 border-rose-200";
      default:
        return "bg-gradient-to-br from-gray-50 to-gray-100 border-gray-200";
    }
  };

  // ===== –†–µ–Ω–¥–µ—Ä =====
  return (
    <div className="p-6">
      {/* –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && (
        <div className="w-full flex items-center justify-center py-16">
          <div className="w-12 h-12 border-4 border-purple-500 border-t-transparent rounded-full animate-spin" />
        </div>
      )}

      {!loading && (
        <div className="max-w-6xl mx-auto">
          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <div className="bg-red-100 text-red-700 border border-red-300 px-4 py-3 rounded-lg mb-6">
              {error}
            </div>
          )}

          {/* –§—Ä–µ–π–º "–ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" */}
          <div className="bg-gradient-to-br from-purple-50 to-orange-50 rounded-xl shadow-lg border border-purple-200 p-6">
            <h2 className="text-2xl font-bold text-purple-800 mb-6 text-center">
              –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </h2>

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
            {!error && items.length === 0 && (
              <div className="text-center py-12">
                <div className="text-purple-400 text-4xl mb-4">üì¶</div>
                <div className="text-purple-700 text-lg font-medium mb-2">
                  –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                </div>
                <div className="text-purple-600 text-sm">
                  –ü–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏–ª–∏
                  –ø–æ–∫—É–ø–∞–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
                </div>
              </div>
            )}

            {/* –°–µ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∏–¥–µ–∞–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º */}
            {items.length > 0 && (
              <div className="flex flex-wrap justify-center gap-6">
                {items.map((userItem) => {
                  const item = userItem.inventoryitem;
                  const isClickable = item.activity;
                  const isDropdownOpen = selectedItem === item.inventoryid;

                  return (
                    <div key={item.inventoryid} className="relative">
                      {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–µ–π–¥–∂ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                      <div
                        className={`
                          ${getBadgeStyle(item.inventorytype)}
                          border-2 rounded-xl p-4 shadow-md transition-all duration-200 w-64 min-h-[280px]
                          ${
                            isClickable
                              ? "cursor-pointer hover:shadow-lg hover:scale-105 active:scale-95"
                              : "opacity-60 cursor-not-allowed"
                          }
                          ${isDropdownOpen ? "ring-2 ring-purple-500" : ""}
                        `}
                        onClick={() => {
                          if (isClickable && item.itemactions.length > 0) {
                            setSelectedItem(
                              isDropdownOpen ? null : item.inventoryid
                            );
                          }
                        }}
                      >
                        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–±–µ–π–¥–∂ –≤ —É–≥–ª—É) */}
                        {parseInt(item.quantity) > 1 && (
                          <div className="absolute -top-2 -right-2 bg-orange-500 text-white text-sm font-bold px-2 py-1 rounded-full shadow-md border-2 border-white">
                            {item.quantity}
                          </div>
                        )}

                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                        <div className="flex justify-center mb-3">
                          <img
                            src={item.inventoryimage}
                            alt={item.inventoryname}
                            className="w-16 h-16 object-contain"
                            onError={(e) => {
                              console.error(
                                `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${item.inventoryimage}`
                              );
                              e.currentTarget.src = "/placeholder-item.png";
                            }}
                          />
                        </div>

                        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                        <h3 className="text-sm font-bold text-gray-800 text-center mb-2 leading-tight">
                          {item.inventoryname}
                        </h3>

                        {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
                        <p className="text-xs text-gray-600 text-center leading-relaxed">
                          {item.inventorydescription}
                        </p>

                        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                        {isClickable && item.itemactions.length > 0 && (
                          <div className="flex justify-center mt-3">
                            <div className="flex space-x-1">
                              <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-pulse"></div>
                              <div
                                className="w-1.5 h-1.5 bg-purple-400 rounded-full animate-pulse"
                                style={{ animationDelay: "0.2s" }}
                              ></div>
                              <div
                                className="w-1.5 h-1.5 bg-purple-300 rounded-full animate-pulse"
                                style={{ animationDelay: "0.4s" }}
                              ></div>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π */}
                      {isDropdownOpen && item.itemactions.length > 0 && (
                        <>
                          {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ */}
                          <div
                            className="fixed inset-0 bg-black bg-opacity-25 z-40"
                            onClick={() => setSelectedItem(null)}
                          />

                          {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ */}
                          <div className="absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-xl border border-gray-200 z-50 overflow-hidden">
                            {item.itemactions.map((action, index) => (
                              <button
                                key={index}
                                className={`w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-gray-50 transition-colors duration-150 border-b border-gray-100 last:border-b-0 ${
                                  actionLoading === action.actionname
                                    ? "bg-gray-50 cursor-not-allowed"
                                    : ""
                                }`}
                                onClick={() => handleItemAction(action)}
                                disabled={actionLoading === action.actionname}
                              >
                                {/* –ò–∫–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
                                <img
                                  src={action.actionicon}
                                  alt=""
                                  className="w-6 h-6 object-contain flex-shrink-0"
                                />

                                {/* –¢–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è */}
                                <span className="text-sm text-gray-700 flex-grow">
                                  {action.actionname}
                                </span>

                                {/* –°–ø–∏–Ω–Ω–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∂–∞—é—â–µ–≥–æ—Å—è –¥–µ–π—Å—Ç–≤–∏—è */}
                                {actionLoading === action.actionname && (
                                  <div className="w-4 h-4 border-2 border-purple-500 border-t-transparent rounded-full animate-spin flex-shrink-0" />
                                )}
                              </button>
                            ))}
                          </div>
                        </>
                      )}

                      {/* –ù–û–í–´–ô: –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                      {actionLoading &&
                        item.itemactions.some(
                          (action) => action.actionname === actionLoading
                        ) && (
                          <div className="absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-xl z-60">
                            <div className="flex flex-col items-center gap-2">
                              <div className="w-8 h-8 border-4 border-purple-500 border-t-transparent rounded-full animate-spin" />
                              <span className="text-sm text-purple-600 font-medium">
                                –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...
                              </span>
                            </div>
                          </div>
                        )}
                    </div>
                  );
                })}
              </div>
            )}
          </div>

          {/* –§—Ä–µ–π–º "–ü—Ä–µ–¥–º–µ—Ç—ã –º–æ–Ω—Å—Ç—Ä–æ–≤" */}
          <React.Suspense
            fallback={
              <div className="w-full flex items-center justify-center py-16">
                <div className="w-12 h-12 border-4 border-emerald-500 border-t-transparent rounded-full animate-spin" />
              </div>
            }
          >
            <MonsterItems
              userId={userId}
              onRefreshAllFrames={refreshAllFrames}
            />
          </React.Suspense>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      {showModal && (
        <div
          className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50"
          onClick={() => {
            setShowModal(false);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            refreshAllFrames();
          }}
        >
          <div
            className="bg-white rounded-xl shadow-xl p-6 max-w-md w-full mx-4"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="text-lg font-semibold mb-4 text-gray-800">
              –†–µ–∑—É–ª—å—Ç–∞—Ç
            </div>
            <div className="text-gray-700 whitespace-pre-wrap mb-6">
              {actionMessage}
            </div>
            <div className="flex justify-end">
              <button
                onClick={() => {
                  setShowModal(false);
                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                  refreshAllFrames();
                }}
                className="px-6 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors duration-200"
              >
                OK
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Inventory;
